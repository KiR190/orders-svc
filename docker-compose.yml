services:
  app:
    container_name: app
    build: .
    ports:
      - "80:8080"
    environment:
      DATABASE_URL: "postgres://orders_user:orders_pass@postgres:5432/orders_db?sslmode=disable"
    depends_on:
      postgres:
        condition: service_healthy
  kafka:
    image: bitnami/kafka:latest
    container_name: kafka
    ports:
      - "9092:9092"
      - "9093:9093"
      - "9094:9094"
    environment:
      KAFKA_ENABLE_KRAFT: yes

      KAFKA_KRAFT_CLUSTER_ID: 3bP06iLFRouGUXD9eazcMg

      KAFKA_CFG_NODE_ID: 1
      KAFKA_CFG_PROCESS_ROLES: broker,controller
      KAFKA_CFG_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_CFG_LISTENERS: PLAINTEXT://:9092,EXTERNAL://:9094,CONTROLLER://:9093
      KAFKA_CFG_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,EXTERNAL://localhost:9094
      KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: 1@kafka:9093
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_CFG_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE: true

      KAFKA_CFG_LOG_DIRS: /bitnami/kafka/data
    volumes:
      - kafka_data:/bitnami/kafka
  postgres:
    image: postgres:latest
    container_name: postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - ./scripts/schema.sql:/docker-entrypoint-initdb.d/init_db.sql
      - ./scripts/init-users.sql:/docker-entrypoint-initdb.d/init_users.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U orders_user -d orders_db"]
      interval: 5s
      timeout: 5s
      retries: 5
    ports:
      - "5432:5432"

volumes:
  kafka_data:
    driver: local
  pgdata: